

I believe this is the hardest milestone that I’ve completed throughout this course (especially the milestone 3). I had a lot of struggles and hard times throughout milestone 3. This milestone tests the overall knowledge that we learned throughout this semester. First of all, I have to have deeper understanding STL containers, algorithms, as well as inheritance between the classes. Second, I had to understand the logic behind each module and each class, and each function that I was working on. I found it is difficult to complete each module of the milestone without complete understanding of the logic behind it. Third, I had to review previous milestone before preceding next milestone. 
By doing this milestone, it helped me to strengthen my knowledge about STL containers, algorithms, and pointers.The most difficult part for me is “attemptToMoveOrder” function in workstation module, the two argument constructor and “run” function in LineManager module. 
Firstly, “attemptToMoveOrder” function in workstation module was the part where I was stuck was the part where I added the user's order to the "completed" or "imcompleted" container after checking whether the status of the item is filled or not. However, I had to put Rania and Hong H. orders in "imcompleted" container, but I misunderstood the instruction. The way I implemented is that It was saved in "Completed" container. This part I was able to fix it through debugging by checking the values of the variables line by line.
This is the way I fived the “attemptToMoveOrder” function in workstation module:
  if (order.isItemFilled(this->getItemName()) || this->getQuantity() == 0) {
             if (m_pNextStation) {
                *m_pNextStation += (std::move(order));
             }
             else 
             {
                if (order.isOrderFilled()) {
                   g_completed.push_back(std::move(order));
                }
                else {
                   g_incomplete.push_back(std::move(order));
                }
             }
             flag = true;
             m_orders.pop_front();
          }
Second, the two argument constructor in LineManager module was the most challenging part for me. I had use some algorithms such as find_if and fore_each functions as well as lamda expression. I had to search through online and go back to course notes to understand how to implement these algorithoms in the constructor. In additon, the “run” function in the Linemanager module is also the hard one to implement. I have to use the same algorithm for_each to iterate elements from beginning to end and use Lamda expression to fill or move orders. I also had to use double ended queues which is deque (external variable inside workstation module) to move the order at the front of the p_pending queue to the m_firststation and remove it from deque container. The way I implement is like this:
bool LineManager::run(std::ostream& os)
	{
		static unsigned int COUNTER = 0u;
		os << "Line Manager Iteration: " << ++COUNTER << std::endl;
		if (!g_pending.empty())
		{
			*m_firstStation += std::move(g_pending.front());
			g_pending.pop_front();

		}
		std::for_each(m_activeLine.begin(), m_activeLine.end(), [&os](Workstation* ws)
			{
				ws->fill(os);
			});
		std::for_each(m_activeLine.begin(), m_activeLine.end(), [](Workstation* ws)
			{
				ws->attemptToMoveOrder();
			});
		
		return g_completed.size() + g_incomplete.size() == m_cntCustomerOrder;
	}

Overall, this was a very challenging milestone. However, I learned a lot while applying different STL containers, algorithms, pointers, and inheritance. To make it short, I like to learn new things everyday, lol! 
Have a happy Christmas, professor!


