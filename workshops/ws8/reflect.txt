// Name:  Reziyemu Sulaiman
// Seneca Student ID: 106-153-208
// Seneca email: rsulaiman2@myseneca.ca
// Date of completion: 2022-11-24
//
// I have done all the coding by myself and only copied the code that my classmate provided to complete my workshops and assignments.



Through this workshop, I was able to learn smart pointers. First, smart pointers are a smart function. Introduced in C++11, a total of three smart pointers, which are “unique_ptr”, “shared_ptr” and “weak_ptr”, are commercialized, defined in the <memory> header file. However, in this workshop, I focused on only using “unique_ptr” like “std::unique_ptr<EmployeeWage> e(new EmployeeWage(emp[i].name, sal[j].salary));” in WringRecord.cpp. There are great advantages of using smart pointers. So far, I have had a hard time finding memory leaks during debugging when using pointers in C or C++. However, smart pointers save me from memory leaks. The reason is that smart pointers are class templates that act like pointers, which automatically release memory when the end of use. It is the same process as automatically invoking the destructor after the use of a class. Therefore, in “WriteSmart” function, it is used to create temporary smart pointers pointing to EmployeeWage objects and store them in list container “GeneratingList”. This Smart Pointer then automatically releases memory by invoking destructor defined in the EmployeeWage structure in “EmpProfile.h” because it no longer has a reason to use any more.

There is a noticeable difference between using raw pointer and using smart pointer. If I use raw pointer to make a temporary object and store it in a container, I must not forget to release the temporary object's memory directly. If I miss this process, I am stuck in a memory leak. However, if I do the same thing as above using smart pointer, I do not have to release the memory directly. Because the smart pointer releases the memory on its own. Although the length of code that needs to be implemented using raw or smart pointer does not very much, as a result, there are significant differences in debugging.

